{"variants":[{"paths":["\/documentation\/errorcode\/errorcodeextension(codelength:codecharacters:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCodeExtension(codeLength:codeCharacters:)"},"hierarchy":{"paths":[["doc:\/\/ErrorCode\/documentation\/ErrorCode"]]},"metadata":{"externalID":"s:9ErrorCode0aB9Extension10codeLength0D10CharactersySiSg_s12StaticStringVSgtcfm","title":"ErrorCodeExtension(codeLength:codeCharacters:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ErrorCodeExtension","kind":"identifier"},{"kind":"text","text":"("},{"text":"codeLength","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"codeCharacters"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"modules":[{"name":"ErrorCode"}],"roleHeading":"Macro","symbolKind":"macro","role":"symbol"},"sections":[],"abstract":[{"text":"Adds a pseudo-random, alphanumeric ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/opaqueCode"},{"type":"text","text":" "},{"type":"codeVoice","code":"String"},{"text":" property to each member of an ","type":"text"},{"type":"codeVoice","code":"enum"},{"type":"text","text":" declaration that is safe to present to a user without unintentionally exposing implementation details. This "},{"type":"codeVoice","code":"opaqueCode"},{"type":"text","text":" can be used to re-construct the "},{"isActive":true,"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode","type":"reference"},{"text":" that produced it by calling the synthesized ","type":"text"},{"type":"reference","identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/init(opaqueCode:)","isActive":true},{"type":"text","text":" initializer."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, names: named(OpaqueCode), named(opaqueCode), named(init(opaqueCode:)), named(OpaqueCodeError)) "},{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"ErrorCodeExtension","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"codeLength"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":"? = nil, ","kind":"text"},{"text":"codeCharacters","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":"? = nil)","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"Exposing error names or detailed descriptions to the user can be confusing to a non-technical person, and a potential security risk if it describes implementation details. This macro, which provides a default implementation of "},{"type":"reference","identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode","isActive":true},{"text":", allows the developer to add an opaque error code an existing Swift ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" type that indicates what went wrong, and where. These types can then be exposed to the user safely using their ","type":"text"},{"type":"reference","identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/opaqueCode","isActive":true},{"text":" property. This code can then be reported via analytics, or manually by the user, then used with the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/init(opaqueCode:)"},{"type":"text","text":" initializer to see exactly which error code was triggered, and potentially even where it was triggered in code."}],"type":"paragraph"},{"anchor":"Basic-usage","text":"Basic usage","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"To use this macro, simply apply it to an ","type":"text"},{"type":"codeVoice","code":"extension"},{"text":" of an enum, and declare a ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" property named ","type":"text"},{"code":"errorCodes","type":"codeVoice"},{"type":"text","text":" providing an array of instances of "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" to generate error codes for. Due the limitations of Swift member macros, the "},{"type":"codeVoice","code":"ErrorCode"},{"text":" conformance must be declared manually on the extension:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@ErrorCodeExtension","extension AppErrorCode: ErrorCode {","   private static let errorCodes: [Self] = [","       .error1,","       .error2","   ]","}"]},{"inlineContent":[{"text":"This will synthesize the ","type":"text"},{"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/opaqueCode","type":"reference","isActive":true},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/init(opaqueCode:)","type":"reference"},{"type":"text","text":" declarations for you, as well as a couple of private types:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"OpaqueCode"},{"type":"text","text":" type contains a list of static properties containing the "},{"code":"String","type":"codeVoice"},{"text":" literal opaque code values for each case.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"OpaqueCodeError","type":"codeVoice"},{"text":" type contains a few errors that may be thrown when initializing an ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode"},{"type":"text","text":" from the throwing "},{"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/init(opaqueCode:)","type":"reference","isActive":true},{"text":" initializer.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Custom opaque code lengths","anchor":"Custom-opaque-code-lengths"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"codeLength"},{"type":"text","text":" optional parameter can be used to override the generated code length. By default, this value is "},{"type":"codeVoice","code":"4"},{"text":", but it can be any length. You may wish to have shorter codes for ease of reporting and debugging, but the shorter the code, the more likely that the generated codes will collide. If this happens, an error is reported with possible fixits, one of which is to increase the ","type":"text"},{"type":"codeVoice","code":"codeLength"},{"text":" parameter by ","type":"text"},{"code":"1","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Custom opaque code characters","anchor":"Custom-opaque-code-characters","level":3},{"inlineContent":[{"type":"text","text":"The "},{"code":"codeCharacters","type":"codeVoice"},{"type":"text","text":" optional parameter can be used to override which characters are used when generating opaque codes. By default the "},{"type":"codeVoice","code":"[a-zA-Z0-9]"},{"text":" characters are used. The provided ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" must contain at least five unique characters, and duplicate characters are ignored."}],"type":"paragraph"},{"anchor":"Overriding-generated-code","level":3,"type":"heading","text":"Overriding generated code"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As stated above, the "},{"type":"codeVoice","code":"ErrorCode(codeLength:)"},{"type":"text","text":" macro simply generates a conformance to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode"},{"text":" protocol. Most of this generated code is basic boilerplate, and the generated code will work as is. However, should you want to customise the generated implementation, each generated function and type can be manually declared, and the macro will intelligently verify that that declaration is valid, and then use it instead of generating it. There are a few requirements for this:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"opaqueCode"},{"text":" property must have the correct access modifier for it’s containing type to satisfy the ","type":"text"},{"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode","type":"reference","isActive":true},{"type":"text","text":" protocol, and must not have a getter that is "},{"code":"async","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"throws"},{"text":". Declaring this property manually prevents the ","type":"text"},{"type":"codeVoice","code":"childOpaqueCode(for:)"},{"text":" function from being generated by the macro as it will no longer be used.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"init(opaqueCode:)"},{"text":" initializer must also have the correct access modifier for it’s containing type to satisfy the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode"},{"text":" protocol, and must not be failable or ","type":"text"},{"code":"async","type":"codeVoice"},{"type":"text","text":", though it does not have to be a throwing initializer. Declaring this initializer manually prevents the "},{"type":"codeVoice","code":"childErrorCode(for:)"},{"text":" function and ","type":"text"},{"type":"codeVoice","code":"OpaqueCodeError"},{"type":"text","text":" "},{"type":"codeVoice","code":"enum"},{"text":" from being generated by the macro as they will no longer be used.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"OpaqueCode"},{"type":"text","text":" can be declared as an "},{"type":"codeVoice","code":"enum"},{"type":"text","text":", "},{"type":"codeVoice","code":"struct"},{"text":", ","type":"text"},{"type":"codeVoice","code":"class"},{"type":"text","text":" or "},{"code":"actor","type":"codeVoice"},{"text":", and MUST contain one ","type":"text"},{"type":"codeVoice","code":"static"},{"text":" property declared as ","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":" with a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" literal initializer for each case in it’s containing type. An error will be generated if any cases are omitted. Other functionality can be declared in this type without effecting the macro."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"OpaqueCodeError","type":"codeVoice"},{"text":" ","type":"text"},{"type":"codeVoice","code":"enum"},{"type":"text","text":" can be manually declared to add other cases, and can be declared as an "},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"actor","type":"codeVoice"},{"type":"text","text":". If the "},{"type":"reference","identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/init(opaqueCode:)","isActive":true},{"text":" initializer is being generated then this manual declaration must conform to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/OpaqueCodeInitializerError"},{"type":"text","text":" protocol, as there are members on this type that are used by the generated code. "},{"type":"emphasis","inlineContent":[{"text":"Note","type":"text"}]},{"type":"text","text":" that the protocol requirements can be satisfied by "},{"type":"codeVoice","code":"enum"},{"text":" cases in place of ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" properties or functions. If both the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/init(opaqueCode:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"OpaqueCodeError"},{"type":"text","text":" types are declared manually, then no conformance to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/OpaqueCodeInitializerError"},{"type":"text","text":" is required."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of these requirements should be enforced by compiler warnings and errors. If anything doesn’t work as expected, please submit an issue."}]}]}],"kind":"symbol","references":{"doc://ErrorCode/documentation/ErrorCode/ErrorCode/opaqueCode":{"url":"\/documentation\/errorcode\/errorcode\/opaquecode","type":"topic","title":"opaqueCode","kind":"symbol","required":true,"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/opaqueCode","abstract":[{"type":"text","text":"A "},{"code":"String","type":"codeVoice"},{"text":" representation of this instance, that is opaque to the user and does not expose any implementation details.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"opaqueCode"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"}]},"doc://ErrorCode/documentation/ErrorCode/OpaqueCodeInitializerError":{"abstract":[{"text":"The error type used by the ","type":"text"},{"code":"init(opaqueCode:)","type":"codeVoice"},{"text":" initializer generated by the ","type":"text"},{"type":"codeVoice","code":"@ErrorCode"},{"type":"text","text":" macro."}],"title":"OpaqueCodeInitializerError","role":"symbol","navigatorTitle":[{"text":"OpaqueCodeInitializerError","kind":"identifier"}],"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/OpaqueCodeInitializerError","url":"\/documentation\/errorcode\/opaquecodeinitializererror","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OpaqueCodeInitializerError"}]},"doc://ErrorCode/documentation/ErrorCode/ErrorCode/init(opaqueCode:)":{"kind":"symbol","abstract":[{"type":"text","text":"Creates an instance of the conforming type from it’s corresponding "},{"code":"opaqueCode","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/errorcode\/errorcode\/init(opaquecode:)","required":true,"fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"opaqueCode","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/init(opaqueCode:)","role":"symbol","type":"topic","title":"init(opaqueCode:)"},"doc://ErrorCode/documentation/ErrorCode/ErrorCode":{"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode","navigatorTitle":[{"kind":"identifier","text":"ErrorCode"}],"url":"\/documentation\/errorcode\/errorcode","title":"ErrorCode","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ErrorCode","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Defines an interface for converting a type to and from some opaque "},{"type":"codeVoice","code":"String"},{"type":"text","text":" representation."}]},"doc://ErrorCode/documentation/ErrorCode/ErrorCodeExtension(codeLength:codeCharacters:)":{"kind":"symbol","identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCodeExtension(codeLength:codeCharacters:)","type":"topic","abstract":[{"type":"text","text":"Adds a pseudo-random, alphanumeric "},{"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/opaqueCode","type":"reference","isActive":true},{"text":" ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" property to each member of an "},{"code":"enum","type":"codeVoice"},{"type":"text","text":" declaration that is safe to present to a user without unintentionally exposing implementation details. This "},{"type":"codeVoice","code":"opaqueCode"},{"text":" can be used to re-construct the ","type":"text"},{"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode","isActive":true,"type":"reference"},{"text":" that produced it by calling the synthesized ","type":"text"},{"identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode\/ErrorCode\/init(opaqueCode:)","type":"reference","isActive":true},{"type":"text","text":" initializer."}],"url":"\/documentation\/errorcode\/errorcodeextension(codelength:codecharacters:)","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"ErrorCodeExtension","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"codeLength"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"codeCharacters"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"title":"ErrorCodeExtension(codeLength:codeCharacters:)"},"doc://ErrorCode/documentation/ErrorCode":{"type":"topic","kind":"symbol","identifier":"doc:\/\/ErrorCode\/documentation\/ErrorCode","abstract":[],"role":"collection","title":"ErrorCode","url":"\/documentation\/errorcode"}}}